jenkins:
  systemMessage: "Jenkins configured automatically by JCasC"

  authorizationStrategy:
    unsecured: {}

  globalNodeProperties:
    - envVars:
        env:
          - key: SONARQUBE_TOKEN
            value: "${SONARQUBE_TOKEN}" # Ensure this is defined in the environment

tool:
  maven:
    installations:
      - name: "maven3"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"

unclassified:
  location:
    url: http://localhost:8080

  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "SonarQube"
        serverUrl: "http://sonarqube:9000"
        credentialsId: "sonarqube-token"

credentials:
  system:
    domainCredentials:
      - credentials:
          - string:
              scope: GLOBAL
              id: "sonarqube-token"
              description: "SonarQube authentication token"
              secret: "${SONARQUBE_TOKEN}" # Ensure this is defined in the environment

jobs:
  - script: >
      pipelineJob('java-app') {
          definition {
              cps {
                  script("""
                      pipeline {
                          agent any

                          stages {
                              stage('Check-out') {
                                  steps {
                                      echo ('THIS IS MY AUTHENTICATION TOKEN')
                                      echo "\${env.SONARQUBE_TOKEN}"
                                      echo ('Cloning repository')
                                      git 'https://github.com/shashirajraja/onlinebookstore.git'
                                  }
                              }

                              stage('Build') {
                                  steps {
                                      echo ('Building project with Maven...')
                                      withMaven(maven: 'maven3') {
                                          sh 'mvn clean install'
                                      }
                                  }
                              }

                              stage('SAST Analysis') {
                                  steps {
                                      echo ('Running SonarQube analysis...')
                                      withSonarQubeEnv('SonarQube') {
                                          sh "mvn sonar:sonar -Dsonar.login=\${env.SONARQUBE_TOKEN}"
                                      }
                                  }
                              }

                              stage('Quality Gate') {
                                  steps {
                                      timeout(time: 5, unit: 'MINUTES') {
                                          waitForQualityGate abortPipeline: true
                                      }
                                  }
                              }

                              stage('Archive') {
                                  steps {
                                      echo ('Archiving artifacts...')
                                      archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
                                  }
                              }

                              stage('Notify') {
                                  steps {
                                      echo ('Sending notification...')
                                  }
                              }
                          }

                          post {
                              failure {
                                  echo ('Build failed, sending notification...')
                              }
                          }
                      }
                  """)
              }
          }
      }
