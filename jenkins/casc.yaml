jenkins:
  systemMessage: "Jenkins configured automatically by JCasC"

  authorizationStrategy:
    unsecured: {}

  globalNodeProperties:
    - envVars:
        env:
          - key: SONARQUBE_TOKEN
            value: "${SONARQUBE_TOKEN}"

tool:
  maven:
    installations:
      - name: "maven3"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"
  dependency-check:
    installations:
      - name: "OWASP Dependency-Check"
        properties:
          - installSource:
              installers:
                - dependencyCheckInstaller:
                    id: "10.0.3"
  sonarRunnerInstallation:
    installations:
      - name: "sonarqube-scanner"
        properties:
          - installSource:
              installers:
                - sonarRunnerInstaller:
                    id: "6.1.0.4477"

unclassified:
  location:
    url: http://localhost:8080

  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "SonarQube"
        serverUrl: "http://sonarqube:9000"
        credentialsId: "sonarqube-token"

credentials:
  system:
    domainCredentials:
      - credentials:
          - string:
              scope: GLOBAL
              id: "sonarqube-token"
              description: "SonarQube authentication token"
              secret: "${SONARQUBE_TOKEN}"

jobs:
  - script: >
      pipelineJob('java-app') {
          definition {
              cps {
                  script("""
                      pipeline {
                          agent any

                          environment {
                              PROJECT_KEY = "onlinebookstore-\${env.BUILD_NUMBER}"
                          }

                          stages {
                              stage('Check-out') {
                                  steps {
                                      echo 'Cloning repository'
                                      git 'https://github.com/zeke-code/onlinebookstore.git'
                                  }
                              }

                              stage('Build') {
                                  steps {
                                      echo 'Building project with Maven...'
                                      withMaven(maven: 'maven3') {
                                          sh 'mvn clean install'
                                      }
                                  }
                              }

                              stage('SAST Analysis') {
                                  environment {
                                      scannerHome = tool 'sonarqube-scanner'
                                  }
                                  steps {
                                      echo 'Running SonarQube analysis...'
                                      withSonarQubeEnv('SonarQube') {
                                          sh """
                                              \${scannerHome}/bin/sonar-scanner \\
                                              -Dsonar.projectKey=\${env.PROJECT_KEY} \\
                                              -Dsonar.projectName=OnlineBookstore \\
                                              -Dsonar.sources=src \\
                                              -Dsonar.java.binaries=target/classes
                                          """
                                      }
                                      echo 'Running SpotBugs analysis...'
                                      sh 'mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs'
                                  }
                              }

                              stage('SCA Analysis') {
                                  steps {
                                      echo 'Starting SCA Analysis with OWASP dependency scanner...'
                                      dependencyCheck additionalArguments: ''' 
                                          -o './'
                                          -s './'
                                          -f 'ALL' 
                                          --prettyPrint''', odcInstallation: 'OWASP Dependency-Check'
        
                                      dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                                  }
                              }

                              stage('Quality Gate') {
                                  steps {
                                      timeout(time: 5, unit: 'MINUTES') {
                                          waitForQualityGate abortPipeline: true
                                      }
                                  }
                              }

                              stage('Archive') {
                                  steps {
                                      echo 'Archiving artifacts...'
                                      archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
                                      archiveArtifacts artifacts: '**/target/spotbugsXml.xml', allowEmptyArchive: true
                                      archiveArtifacts artifacts: '**/dependency-check-report.*', allowEmptyArchive: true
                                  }
                              }

                              stage('Notify') {
                                  steps {
                                      script {
                                          def buildStatus = currentBuild.result ?: 'SUCCESS'
                                          echo "Build result is: \${buildStatus}"
                                          echo "SonarQube results can be viewed at: http://sonarqube:9000/dashboard?id=\${env.PROJECT_KEY}"
                                          echo 'SpotBugs report generated.'
                                          echo 'Dependency Check report generated.'
                                      }
                                  }
                              }
                          }

                          post {
                              always {
                                  recordIssues tools: [spotBugs(pattern: '**/target/spotbugsXml.xml')]
                              }
                              failure {
                                  echo 'Build failed.'
                              }
                          }
                      }
                  """)
              }
          }
      }
