jenkins:
  systemMessage: "Jenkins configured automatically by JCasC"

  authorizationStrategy:
    unsecured: {}

tool:
  maven:
    installations:
      - name: "maven3"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"

unclassified:
  location:
    url: http://localhost:8080

  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "SonarQube"
        serverUrl: "http://sonarqube:9000"
        credentialsId: ""

jobs:
  - script: >
      pipelineJob('java-app') {
          definition {
              cps {
                  script("""
                      pipeline {
                          agent any

                          environment {
                              SONARQUBE_SERVER = 'SonarQube'
                          }

                          stages {
                              stage ('Check-out') {
                                  steps {
                                      echo ('Cloning repository')
                                      git 'https://github.com/shashirajraja/onlinebookstore.git'
                                  }
                              }

                              stage ('Build') {
                                  steps {
                                      echo ('Building project with Maven...')
                                      withMaven(maven: 'maven3') {
                                          sh 'mvn clean install'
                                      }
                                  }
                              }

                              stage ('SAST Analysis') {
                                  steps {
                                      echo ('Running SonarQube analysis...')
                                      withSonarQubeEnv('SonarQube') {
                                          sh "mvn sonar:sonar -Dsonar.login=squ_151768c935829ad184107471a679d7c26242ffb9"
                                      }
                                  }
                              }

                              stage('Quality Gate') {
                                  steps {
                                      script {
                                          def qg = waitForQualityGate()
                                          if (qg.status != 'OK') {
                                              error "Pipeline aborted due to the quality gate failure: ${qg.status}"
                                          }
                                      }
                                  }
                              }

                              stage('Archive') {
                                  steps {
                                      echo ('Archiving artifacts...')
                                      archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
                                  }
                              }

                              stage('Notify') {
                                  steps {
                                      echo ('Sending notification...')
                                  }
                              }
                          }

                          post {
                              failure {
                                  echo ('Build failed, sending notification...')
                              }
                          }
                      }
                  """.stripIndent())
                  sandbox()
              }
          }
      }
