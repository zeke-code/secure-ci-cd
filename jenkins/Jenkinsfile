pipeline {
    agent any

    environment {
        // Dynamically generate a project key based on the build number
        PROJECT_KEY = "onlinebookstore-${env.BUILD_NUMBER}"
        // Sonarqube scanner tool name in Jenkins configuration
        scannerHome = tool 'sonarqube-scanner'
    }

    stages {
        stage('Check-out') {
            steps {
                echo 'Cloning repository'
                git 'https://github.com/zeke-code/onlinebookstore.git'
            }
        }

        stage('Build') {
            steps {
                echo 'Building project with Maven...'
                withMaven(maven: 'maven3') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SAST Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=${env.PROJECT_KEY} \
                        -Dsonar.projectName=OnlineBookstore \
                        -Dsonar.sources=src \
                        -Dsonar.java.binaries=target/classes
                    """
                }
                echo 'Running SpotBugs analysis...'
                sh 'mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs'
            }
        }

        stage('SCA Analysis') {
            steps {
                echo 'Starting SCA Analysis with OWASP dependency scanner...'
                dependencyCheck additionalArguments: ''' 
                    -o './'
                    -s './'
                    -f 'ALL' 
                    --prettyPrint''', odcInstallation: 'OWASP Dependency-Check'
        
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Archive') {
            steps {
                echo 'Archiving artifacts...'
                archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
                archiveArtifacts artifacts: '**/target/spotbugsXml.xml', allowEmptyArchive: true
                archiveArtifacts artifacts: '**/dependency-check-report.*', allowEmptyArchive: true
            }
        }

        stage('Notify') {
            steps {
                script {
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    echo "Build result is: ${buildStatus}"
                    echo "SonarQube results can be viewed at: http://sonarqube:9000/dashboard?id=${env.PROJECT_KEY}"
                    echo "SpotBugs report can be viewed at: ${env.BUILD_URL}spotbugs/"
                    echo "Dependency Check report can be viewed at: ${env.BUILD_URL}dependency-check-findings/"
                    echo "Complete logs can be found at: ${env.BUILD_URL}console"
                }
            }
        }
    }

    post {
        always {
            recordIssues tools: [spotBugs(pattern: '**/target/spotbugsXml.xml')]
        }
        failure {
            echo 'Build failed. Please check the logs for more information.'
            echo "Build Number: ${env.BUILD_NUMBER}"
            echo "Build URL: ${env.BUILD_URL}"
            echo "Build Result: ${currentBuild.result}"
        }
    }
}
