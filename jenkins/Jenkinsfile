pipeline {
    agent any

    stages {
        stage('Load Environment Variable') {
            steps {
                script {
                    def envVars = readFile('/var/jenkins_home/sonarqube_token.env').trim().split('=')
                    def token = envVars[1]
                    env.SONARQUBE_TOKEN = token
                    echo "Loaded SonarQube Token"
                }
            }
        }

        stage('Check-out') {
            steps {
                echo ('THIS IS MY AUTHENTICATION TOKEN')
                echo "${env.SONARQUBE_TOKEN}"
                echo ('Cloning repository')
                git 'https://github.com/shashirajraja/onlinebookstore.git'
            }
        }

        stage('Build') {
            steps {
                echo ('Building project with Maven...')
                withMaven(maven: 'maven3') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SAST Analysis') {
            steps {
                echo ('Running SonarQube analysis...')
                withSonarQubeEnv('SonarQube') {
                    sh "mvn sonar:sonar -Dsonar.login=${env.SONARQUBE_TOKEN}"
                }
            }
        }

        stage ('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate(credentialsId: 'sonarqube-token') abortPipeline: true 
                }
            }
        }


        stage('Archive') {
            steps {
                echo ('Archiving artifacts...')
                archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            }
        }

        stage('Notify') {
            steps {
                echo ('Sending notification...')
            }
        }
    }

    post {
        failure {
            echo ('Build failed, sending notification...')
        }
    }
}
